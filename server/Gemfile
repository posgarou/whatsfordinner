source 'https://rubygems.org' do
  # Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
  gem 'rails', '4.2.0'
  # Use SCSS for stylesheets
  gem 'sass-rails', '~> 5.0'
  # Use Uglifier as compressor for JavaScript assets
  gem 'uglifier', '>= 1.3.0'
  # Use CoffeeScript for .coffee assets and views
  gem 'coffee-rails', '~> 4.1.0'
  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  gem 'therubyracer', platforms: :ruby

  # Templating
  gem 'slim-rails'

  # Oddly, 1.8.2 was giving segmentation faults in my configuration
  gem 'json', '1.8.1'

  # Use jquery as the JavaScript library
  gem 'jquery-rails'
  # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
  gem 'jbuilder', '~> 2.0'
  # bundle exec rake doc:rails generates the API under doc/api.
  gem 'sdoc', '~> 0.4.0', group: :doc

  # DB
  gem 'mongoid'
  # See https://github.com/neo4jrb/neo4j/issues/724#issuecomment-84990610
  gem 'neo4j', github: 'neo4jrb/neo4j', ref: '34a93a9a2cd40e319b7531eff8cf68e8a069f84d'
  gem 'neo4j-core', github: 'neo4jrb/neo4j-core', ref: '5ed2ea999a10ab21c1faf65d0b86bd41dfdbf4ff'
  # pagination library for neo4j
  gem 'neo4j-will_paginate_redux'

  # Background Processing
  gem 'sidekiq'

  # Cron integration
  # NOTE: If ever deployed on Heroku, cron is incompatible with Heroku's model
  gem 'whenever', require: false

  # Recommended by neo4j developers to improve performance
  gem 'oj'
  gem 'oj_mimic_json'

  # Use ActiveModel has_secure_password
  # gem 'bcrypt', '~> 3.1.7'

  # Use Unicorn as the app server
  # gem 'unicorn'

  # Use Capistrano for deployment
  # gem 'capistrano-rails', group: :development

  group :development do
    gem 'guard-rspec', require: false
    gem 'zeus', require: false

    # Command line interaction
    gem 'highline', require: ['highline/import']

    gem 'better_errors'
    gem 'binding_of_caller'

    # Logging
    gem 'lumberjack'
  end

  group :development, :test do
    # Call 'byebug' anywhere in the code to stop execution
    # and get a debugger console
    gem 'byebug'
    gem 'pry'

    gem 'rspec', '>= 3.2.0'
    gem 'rspec-rails'
    gem 'factory_girl_rails'

    gem 'awesome_print'
  end

  group :test do
    # maintain a clean test db. see database_cleaner_config for use with both
    # db systems
    gem 'database_cleaner'
    gem 'capybara', require: ['capybara', 'capybara/dsl']

    # easily mock time
    gem 'timecop'

    # coverage
    gem 'simplecov', require: false
  end

  # API
  # Edge grape has some nifty features with named params blocks (e.g., support for range validation).
  # Limit to most recent commit as of 3/16/15
  gem 'grape', git: 'git://github.com/intridea/grape.git', ref: '489cdc94a4e36a40f6707d55c565232336aae4fc'
  # Grape decorator
  gem 'grape-entity'
  # Helps in testing grape entities
  gem 'grape-entity-matchers'
  # automatically add documentation at /swagger_doc.json
  gem 'grape-swagger'
  # automatically generate an HTML representation at api/swagger/
  gem 'grape-swagger-ui'

  # Organize business logic
  gem 'interactor-rails'

  # Handle unit math and conversion
  gem 'unitwise'

  # Natural language time parsing and rendering
  gem 'chronic_duration'

  # Play nice with Grape's parameter validation
  gem 'hashie_rails'

  # Handy little gem: load all files in a directory (recursively)
  gem 'require_all'

  group :authorization do
    gem 'omniauth'
    gem 'omniauth-facebook'
    gem 'omniauth-google-oauth2'
    gem 'pundit'
  end
end
